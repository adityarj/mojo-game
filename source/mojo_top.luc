module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    input cclk,             // configuration clock, AVR ready when high
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    input avr_tx,           // AVR TX (FPGA RX)
    input avr_rx_busy,       // AVR RX buffer full
    input io_dip[4],
    output io_led[16] //Assign LEDs as 5,4 -> operator LEDs, 3-0 -> RNG LEDs

  ) {
  
  sig rst;                  // reset signal
  dff number_sequence[4][4](.clk(clk), .rst(rst));
  dff operator_sequence[2][4](.clk(clk), .rst(rst));
  
  dff current_num[6](.clk(clk), .rst(rst));
  dff i[2](.clk(clk), .rst(rst));
  dff j[2](.clk(clk), .rst(rst));
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      pn_gen pn_gen;
    }
    
  }
  
  always {
  
    io_led[7:0] = 0 ;
  
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    //Check if reset signal has been asserted, basiscally, at this step, the game is reset
    if (io_dip[0]) {
      //Reset game, set current number to random 0-9, assign new numbers and operators to the user
      current_num.d = pn_gen.num;
      
      //Below are the four inputs that are going to somehow magically generate a number from 0-9
      number_sequence.d[0] = pn_gen.num;
      number_sequence.d[1] = pn_gen.num;
      number_sequence.d[2] = pn_gen.num;
      number_sequence.d[3] = pn_gen.num;
      
      //Below two numbers magically select a sign
      operator_sequence.d[0] = pn_gen.num;
      operator_sequence.d[1] = pn_gen.num;
      
      //Hook numbers to outputs
       
    }
    
    //Check for change in outputed random numbers
    if (io_dip[1]) {
    
      if (i.q == 3) {
        i.d = 0;
      } else {
        i.d = i.q + 1;
      }
      
    }
    
    //Check for change in assigned operators
    if (io_dip[2]) {
    
      if (j.q == 1) {
        j.d = 0;
      } else {
        j.d = 1;
      }
      
    }
    
    //User has hit enter button, calculate the new current number and check accordingly
    if (io_dip[3]) {
    
      case(operator_sequence.q[j.q]) {
        2b00: //Performs + operation
          current_num.d = current_num.q + number_sequence.q[i.q];
        2b01: //Performs - operation
          current_num.d = current_num.q - number_sequence.q[i.q];
        2b10: //Performs * operation
          current_num.d = current_num.q * number_sequence.q[i.q];
        2b11: //Performs / operation
          current_num.d = current_num.q / number_sequence.q[i.q];
        default: 
          current_num.d = 0;    
      }
      
      if (current_num.q > 63) {
          io_led[9] = 1; //loss
          io_led[8] = 0;
          //Write code that resets the game
      } else if (current_num.q <= 0) {
          io_led[8] = 1; //Win
          io_led[9] = 0;
          //Write code that resets the game
      } 
      
      //Below are the four inputs that are going to somehow magically generate a number from 0-9
      number_sequence.d[0] = pn_gen.num;
      number_sequence.d[1] = pn_gen.num;
      number_sequence.d[2] = pn_gen.num;
      number_sequence.d[3] = pn_gen.num;
      
      //Below two numbers magically select a sign
      operator_sequence.d[0] = pn_gen.num;
      operator_sequence.d[1] = pn_gen.num;
      
    }
    
    //Output for number_sequence
    io_led[3:0] = number_sequence.q[i.q];
    //output for operator_sequence
    io_led[7:4] = operator_sequence.q[j.q];
    //Output for current_num
    io_led[15:10] = current_num.q;
    
    pn_gen.next = 1;
    pn_gen.seed = 0;
    
  }
}